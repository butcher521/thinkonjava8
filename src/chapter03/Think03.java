package chapter03;

/**
 * @Author MPC
 * @Description:
 * @Date Created in 14:46 2020/5/22
 *
 * 第三章 操作符
 * 一元操作符  + - * / % = !=
 * 其中+ 和+= 在String类中被重载了方法；如果操作符前面是字符串，后面的非字符串也会被强转为字符串；
 * 赋值 = 是将等号右边的值付给了左边的空间；对于基本数据类型，传递的是复制过去的值；
 * 赋值结束后，修改左边的值，对右边没有任何影响；
 * 如果是引用型对象的赋值，操作的是对象的引用；复制引用使得两个引用共同指向一个对象；
 * 此时一个引用修改对象，另一个引用的对象（同一个）固然是变化的；
 *当一个引用被另一个引用所覆盖了，被覆盖的引用丢失了原有的对象，这个对象没有名，是个孤儿；就会被gc清理；
 *
 * 有两种生成随机数的方法：一个是Random类中nextInt方法；一个是Math.random方法；
 *  自增自减运算符；有前缀型和后缀，前加加，先运算后传递至；后加加与之相反；
 *
 *  测试对象的等价性；一般使用==或者equals（方法）
 *  若是比较两个对象，使用==，一般是一个引用比较另一个引用；如果引用（标识符）不相同，结果就是false
 *  尽管二者指向了相同的对象地址.==比较的是引用；
 *  equals 一般都是重写了超类的方法,比较二者得值；如果没有重写equals方法，底层就是==，对引用的比较；
 *  *  对于基本数据类型来说，使用==比较就可以；
 *
 *  逻辑运算符 与或非 注意的一点就是短路操作，前面的满足或者不满足条件，哪怕后面的发生错误，也就不需要在
 *  处理（编译通过）；
 *  直接常量的后面加上后缀，例如float 类型加F,long 类型加上L；16进制加上ox 2进制为0bl；
 *  指数计数法中e代表10的幂次；
 *  按位操作位用来二进制位的单个bit;
 *  有按位与& 和按位或| ，一般是两个二进制数组对位进行运算操作；
 *
 * 三元操作符   boolean-exp? true:false;
 * 字符串加法重载问题：出现字符串以后，都是字符串，没有出现之前按照原有的相加
 * 基本数值的类型转换大转小需要进行显示的说明；
 * 对于浮点数转向整型，进行截断小数部分的操作；如果想四舍五入，调用math.round方法操作；
 *
 */
public class Think03 {
}
