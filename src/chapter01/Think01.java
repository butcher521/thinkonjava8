package chapter01;

import java.util.ArrayList;

/**
 * 修改
 *第一章 对象导论
 *  * 1.抽象过程
 *  * oop 面向对象编程就是对象的集合构成了程序；
 *  * 类是对象的高度抽象，类就是抽象数据类型；对象是类的实例；
 *  * 每一个对象都有其标识（对象引用），状态（变量），行为（方法）
 *  * 每一个对象都有自己独有的物理地址，每一个对象可以有多个引用指向唯一的地址；
 *  *
 *  * 2.每一个对象都有一个接口
 *  * 每一个对象唯一，但是每一类对象具有相同的行为和特性，具体有各不相同；这就是class类，对象的高度抽象；
 *  * 抽象也是oop的一大特色；
 *  * 对象的接口规范了对象能解决怎样的问题；接口interface就是高度抽象的方法；
 *  * 在具体的问题中，具体实现这些接口；
 *  *
 *  * 3.每一个对象都提供服务
 *  * 将对象作为解决问题的服务者，设计程序时想想这个对象能解决什么问题；将整个问题拆分为多个解决问题的对象
 *  * 每一个对象最好能解决少量的问题，防止含有多个功能的对象臃肿；
 *  *
 *  * 4，封装
 *  * 将数据，方法封装成黑盒子，开发者和使用者的权限不同；这样可以源码更安全，更容易维护；
 *  * 这是由权限访问修饰符决定的额；一个类的成员属性最好是私有的，只能通过其他的方式获取；
 *  * 权限修饰符，从小到大为private  protected default public
 *  *
 *  * 5,复用
 *  * 一个类调用另一个类的对象，获得其方法，称为聚合，组合，关联，强关系；关系为has-a；
 *  * 依赖关系：use-a 这是一种弱关系，一位类在另一个类中被使用，例如参数调用；
 *  * 继承关系：is-a，子类继承了父类的全部方法；
 *  * 实现关系：多表现为类对某个接口的实现；
 *  *
 *  * 6继承
 *  * java强调类的单继承关系；
 *  * 父类是所有子类的共性抽取；
 *  * 子类一般拥有比父类更多的特性；所以一个子类可以被看成一个父类，可以向上转型；
 *  * 而一个父类并不一定是一个子类，要先做类型判断，才能向下转型。instance of 关键字判断；
 *  * 子类继承了父类的所有成员：注意私有属性是被隐藏了；
 *  * 重要的是子类继承了父类的所有接口；这就是多态的基础；
 *  * 子类有两种方法与父类不同：
 *  * 1：添加新方法  like a2.重写父类方法 is a
 *  *
 *  * 7多态
 *  * 将对象看作是其父类处理，可以不用编写特定于各个子类的代码；实现类的代码的抽象和精简与重复利用；
 *  * 传递给父类的信息可以顺利的传递给子类；这也就实现了多态；并且不用担心哪一个子类执行该信息；
 *  * 对象自己会根据自身情况恰当的处理从父类传递的消息；
 *  * oop在程序执行时才会确定执行的对象；就是所谓的后期绑定；这并不是编译器在起作用；
 *  * 调用非静态方法时，编译看左，运行看右；
 *  * 方法体的地址由具体的对象中储存的信息所计算提供；
 *  *
 *  *  8 单继承结构
 *  *  所以的类的最终基类是Object，他的接口使得所有的类都共有
 *  *
 *  *  9 容器
 *  *  创建一个对象，其中储存着众多统一类型的对象的引用；
 *  *  list 线性表  set 非重复元素  map 映射存储
 *  *
 *  *  10 参数化类型 泛型
 *  *  之前都是object类型，干扰了原有的数据类型
 *  *  为了使容器的使用更加的方法，java 5加入了泛型的概念
 *  *
 *  *  11.对象的创建和生命周期
 *  *  new的对象均位于heap内存空间中；
 *  *  jvm虚拟机，gc 垃圾回收机制；
 *  *
 *  *  12 多线程
 *  *  如果是多核cpu就直接并发处理；
 *  *  单核的cpu引出了并发、多线程的概念；
 *  *  对于共享的资源，又出现了了线程安全的问题，这就加入了锁的机制；保证线程的安全；
 *  *
 *  *  13 java与web
 *  *  典型的服务器客服架构中，服务器就是一个中央的数据库；
 *  *  涉及到数据库的各种管理问题；
 *  *  例如数据之间不能互相干扰：事务处理；
 * */
public class Think01 {

}
