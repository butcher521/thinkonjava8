package chapter14;

/**
 * @Author MPC
 * @Description:
 * @Date Created in 17:00 2020/5/29
 * 第14章 类型信息
 * 在程序运行的时候使用类型信息
 * 解除了只能在编译器的禁锢；
 * 多态的使用中，存储时向上转型为基类，运行时，向下转型为具体类型！
 * 运行期类型使得能够在泛化的类型中向下转型为具体的类型信息；进行特殊的操作；
 * 每一个类的创建都会产生一个Class对象，这个保存在字节码文件中，这个class对象有
 * 虚拟机的类加载器加载！
 * 一个类第一次使用（创建对象，或者访问静态属性）就会动态的加载到jvm中，
 * 也就是侧面反省一个类的构造器也是静态的；
 * 一般都是需要什么加载什么！并非一次性加载完！
 * 类加载会检查这个类的class对象是否加载如内存，然后用来创建该类的所有的对象！
 * 包括方法，构造器，成员变量的对象数组！
 * 获取class对象引用来进行操作，这就是类加载器的工作；
 * 获取class对象的方法：
 * 1 使用静态方法 Class.forName(String name)  注意是全类名
 * 加载类会使类内的静态属性加载！这个需要异常的检查
 *2 通过类对象调用getClass()方法：
 *  3 类字面常量 类名.class;方便快捷，不需要异常检查！
 * 类字面常量可引用于基本数据类型，接口，数组等；包装类使用TYPE字段
 * 此方法不会自动的初始化类！这叫做延迟初始化，是有惰性的！
 * 注意:只有静态方法和非常数静态域的首次引用才进行初始化！
 * 编译器静态常量的访问是不会引发初始化的；非编译器的静态常量才可以初始胡！
 * 以上都是先进行初始化，在进行属性的访问！静态的初始化只进行一次！
 * 类创建对象的过程
 * 1.类加载器按照classpath寻找类的字节码文件，在其中创建class对象；
 * 2.连接  验证字节码的安全性，为静态属性分配空间
 * 3.进行初始化
 * Class类中的常用犯法：
 * getname，获取全类名 getSimply 获取简单雷鸣  getSuperClass获取父类；
 * getInterfaces 获取接口数组；isInterface 是否接口！newInstance h获取类的实例对象；
 *
 * Class引用是某个类的额确切类型，而不是多态的基类类型；
 * 所以Class使用了泛型，向放松泛型对类型的限制，要不使用泛型，要么在泛型中加入通配符？
 * 一个类型的子类语法 <? extends 基类>
 *     但获取一个了的父类，getSuperClass，返回的引用泛型只能<? super 子类>，
 *     此时实例也只能是泛化的Object；如果是确切类型的额class对象，实例也是确切类型的对象的引用！；
 *
 *   转型语法！默认的在对象的引用前面加上括号直接占星；
 *   方法就是Class对象 cast(Object obj)方法！
 *
 *   Rrri 运行时类型转换（向上转型） 类型转换的正确性和获取类型系信息
 *   类型安全检查是否可以向下转型；关键字 instanceof 是否是一个类的实例；
 *  对于类型西，类型检查instanceof考虑到了继承的额关系，至于类对象比较没有考虑继承；
 *
 *  反射，运行时类信息；
 *  编译时必须知道这个类，才能通过rtti来处理；
 *  反射提供了一种机制，检查可用方法，返回方法名；
 *  java。lang包下的class类 以及java。lang。reflect包洗的方法提供了反射；
 *  member接口是所有类信息的成员接口 实现了Field Construction Method的类；
 *  这是在jvm运行时创建的；
 *  rtti编译器在编译时打开检查class文件，反射实在运行时发开和检查class文件；
 *  在类型转换的时候注意就封装，如果访问符限制，将不会转型，因为找不到被封装的类；
 *
 *  每一个类都有获取其成员对象的方法，比如 getMethods(“name”); 这会获取公共的方法
 *  getDeclaredMethod(name) 获取所有的方法；但是不包括继承的方法，例如Object下来的类
 *  调用私有方法前必须允许方法，
 *  method.setAccessible(true) 然后就可以调用    method。invoke（对象引用，参数！）
 *  其他的Field也是一样的，获取内容的方法是get（对象的引用）
 *  对于反射来说，可以随意获取该类的所有私有的属性
 *
 *
 */
public class Think14 {
}
